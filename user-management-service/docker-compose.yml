# ============================================================================
# docker-compose.yml - Configuración para desarrollo y producción
# ============================================================================
# Este archivo define los servicios necesarios para ejecutar la aplicación:
# - MongoDB: Base de datos
# - User Management Service: API REST

# version: '3.8' # Obsoleto en Docker Compose v2

services:
  # ==========================================================================
  # MongoDB - Base de datos
  # ==========================================================================
  mongodb:
    image: mongo:7.0
    container_name: user-management-mongodb
    restart: unless-stopped
    
    # Variables de entorno
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-admin123}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-user_management}
    
    # Puertos
    ports:
      - "${MONGO_PORT:-27017}:27017"
    
    # Volúmenes para persistencia de datos
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      # Script de inicialización (opcional)
      # - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    
    # Health check
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    
    # Red
    networks:
      - user-management-network
    
    # Comandos adicionales
    command: mongod --auth
    
    # Logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================================================
  # User Management Service - API REST
  # ==========================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    
    container_name: user-management-service
    restart: unless-stopped
    
    # Dependencias
    depends_on:
      mongodb:
        condition: service_healthy
    
    # Variables de entorno
    environment:
      PORT: ${PORT:-3001}
      
      # MongoDB - URI de conexión usando el servicio de docker-compose
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-admin123}@mongodb:27017/${MONGO_DATABASE:-user_management}?authSource=admin
      
      # JWT
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-change-in-production}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-30d}
      
      # Bcrypt
      BCRYPT_SALT_ROUNDS: ${BCRYPT_SALT_ROUNDS:-12}
      
      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
    
    # Puertos
    ports:
      - "${PORT:-3002}:3001"
    
    # Health check
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Red
    networks:
      - user-management-network
    
    # Logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# ============================================================================
# Volúmenes
# ============================================================================
volumes:
  mongodb_data:
    driver: local
    name: user-management-mongodb-data
  mongodb_config:
    driver: local
    name: user-management-mongodb-config

# ============================================================================
# Redes
# ============================================================================
networks:
  user-management-network:
    driver: bridge
    name: user-management-network

