# ============================================================================
# docker-compose.dev.yml - Configuración para desarrollo
# ============================================================================
# Este archivo extiende docker-compose.yml con configuraciones específicas
# para desarrollo: hot-reload, volúmenes para código, etc.

version: '3.8'

services:
  # ==========================================================================
  # MongoDB - Base de datos (mismo que producción)
  # ==========================================================================
  mongodb:
    image: mongo:7.0
    container_name: user-management-mongodb-dev
    restart: unless-stopped
    
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-admin123}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-user_management}
    
    ports:
      - "${MONGO_PORT:-27017}:27017"
    
    volumes:
      - mongodb_dev_data:/data/db
      - mongodb_dev_config:/data/configdb
    
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    
    networks:
      - user-management-network-dev
    
    command: mongod

  # ==========================================================================
  # User Management Service - Desarrollo con hot-reload
  # ==========================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    
    container_name: user-management-service-dev
    restart: unless-stopped
    
    depends_on:
      mongodb:
        condition: service_healthy
    
    environment:
      NODE_ENV: development
      PORT: ${PORT:-3001}
      
      # MongoDB - Sin autenticación en desarrollo (más fácil para desarrollo)
      # Cambia a la línea comentada si quieres usar autenticación también en desarrollo
      MONGODB_URI: mongodb://mongodb:27017/${MONGO_DATABASE:-user_management}
      # MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-admin123}@mongodb:27017/${MONGO_DATABASE:-user_management}?authSource=admin
      
      # JWT - Valores por defecto para desarrollo
      JWT_SECRET: ${JWT_SECRET:-dev-secret-key-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-dev-refresh-secret-key-change-in-production}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-30d}
      
      BCRYPT_SALT_ROUNDS: ${BCRYPT_SALT_ROUNDS:-10}
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
    
    ports:
      - "${PORT:-3001}:3001"
    
    # Volúmenes para hot-reload - montar código fuente
    volumes:
      - ./src:/app/src:ro
      - ./public:/app/public:ro
      - ./package.json:/app/package.json:ro
      - /app/node_modules
      - ./logs:/app/logs
    
    # Health check
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    networks:
      - user-management-network-dev
    
    # Comando para desarrollo con nodemon
    command: npm run dev
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  mongodb_dev_data:
    driver: local
    name: user-management-mongodb-dev-data
  mongodb_dev_config:
    driver: local
    name: user-management-mongodb-dev-config

networks:
  user-management-network-dev:
    driver: bridge
    name: user-management-network-dev

